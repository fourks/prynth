<!DOCTYPE html>
<html>
<head>
	<title>Prynth</title>
	<link rel='stylesheet' href='/stylesheets/style.css' />

	<!--Jquery-->
	<script src="javascripts/jquery/jquery-3.2.1.min.js"></script>

	<!--socket.io-->
	<script src="javascripts/socket.io/socket.io.js"></script>

	<!--codemirror-->
	<script src="javascripts/codemirror/lib/codemirror.js"></script>

	<link rel="stylesheet" href="javascripts/codemirror/lib/codemirror.css">
	<link rel="stylesheet" href="javascripts/codemirror/theme/prynth-cm.css">

	<script src="javascripts/codemirror/mode/javascript/javascript.js"></script>
	<script src="javascripts/codemirror/mode/sc/sc.js"></script>
	<script src="javascripts/codemirror/addon/edit/matchbrackets.js"></script>
	<script src="javascripts/codemirror/addon/edit/closebrackets.js"></script>
	<script src="javascripts/codemirror/addon/comment/comment.js"></script>
	<script src="javascripts/codemirror/addon/selection/active-line.js"></script>

	<style type="text/css">
		.CodeMirror {width:100%; height:460px;}
	</style>

</head>

<body>
<div>
	<a href="http://prynth.github.io" target="_blank" style="text-decoration: none"><img src="/images/prynth_logo.png" style="width: 30px;"> <span style="font-size:2em;"> Prynth</span> </a>
</div>

<div style="width: 70vw; float: left" class="PrynthPanel">
	<form>
		<h2 class="PrynthPanelLabel">Editor</h2><span id="loadedFile" ></span><br>
		<textarea id="codeTextarea"><%=tempcode%></textarea>
		<button type="button" id="runButton">Run</button>
		<button type="button" id="killButton">Kill</button>
		<a href="/schelp/index.html" target="_blank"><button type="button">Help</button></a>
        <button type="button" id="restartSclangButton">Restart SC</button>

		<br>
		<br>

		<h2 class="PrynthPanelLabel">Post Window</h2>
		<textarea id="consoleTextarea" style="height: 120px;resize: vertical"></textarea>
		<br>
		<button type="button" id="clearConsoleButton">Clear</button>
	</form>
</div>

<div style="float: left; width: 220px">
	<div style="width: 200px;" class="PrynthPanel">
		<h2 class="PrynthPanelLabel">System Info</h2>
		Uptime: <span id="clock"></span><br>
		Hostname: <span id="hostname"></span><br>
		Ethernet IP: <span id="ethernetip"></span><br>
		Wireless IP: <span id="wirelessip"></span><br>
		CPU usage: <span id="cpu"></span><br>
		Free memory: <span id="freemem"></span><br>
		<form>
			<hr>
			Power:<br>
            <button type="button" id="rebootButton">Reboot</button>
			<button type="button" id="shutdownButton">Shutdown</button><br>
			<hr>
			Settings:<br>
			<a href="/system" target="_blank"><button type="button">System</button></a>
			<a href="/sensors" target="_blank"><button type="button">Sensors</button></a>
		</form>
	</div>

	<div style="width: 200px;" class="PrynthPanel">
		<h2 class="PrynthPanelLabel">SC files</h2>
		<select id="supercolliderfiles" multiple style="width:200px; height:120px">
			<% for (var i = 0; i < supercolliderfiles.length; i++) { %>
			<option value="<%=i%>"><%=supercolliderfiles[i]%>
				<% } %>
		</select>
		<br>

		<button type="button" id="savescfilebutton">Save</button>
		<button type="button" id="loadscfilebutton">Load</button>
		<button type="button" id="deletescfilebutton">Delete</button>
	</div>

	<div style="width: 200px;" class="PrynthPanel">
		<h2 class="PrynthPanelLabel">Sound files</h2>
		<select id="soundfiles" multiple style="width: 200px; height: 120px">
			<% for (var i = 0; i < soundfiles.length; i++) { %>
			<option value="<%=i%>"><%=soundfiles[i]%>
				<% } %>
		</select>
		<br>
		<form id = "soundfileupload" enctype="multipart/form-data" method="post" action="/soundfileupload">
			<label class="myLabel">
				<input type="file" style="visibility: hidden" name="filename" multiple onchange="javascript:this.form.submit();"/>
				<span>Upload</span>
			</label>
			<button type="button" id="deletesoundfilebutton">Delete</button>
		</form>
	</div>
</div>


<script>
	var editor = CodeMirror.fromTextArea(document.getElementById("codeTextarea"), {
		lineNumbers: true,
		mode: "sc",
		matchBrackets: true,
		autofocus: true,
		styleActiveLine: true,
		smartIndent: false,
		indentWithTabs: true,
		lineWrapping: true,
		theme: "prynth-cm",
		autoCloseBrackets: true
	});

    var curWord = "";


    editor.on("cursorActivity", function(editor) {

	    var A1 = editor.getCursor().line;
	    var A2 = editor.getCursor().ch;

	    var B1 = editor.findWordAt({line: A1, ch: A2}).anchor.ch;
	    var B2 = editor.findWordAt({line: A1, ch: A2}).head.ch;

	    curWord = editor.getRange({line: A1,ch: B1}, {line: A1,ch: B2});

        var openBracket = "(";
        var closeBracket = ")";
        var curLine = editor.getCursor().line;
        var lineNow = curLine;
        var curLineContent;
        var checkOpen=1;
        var bracketCount = 0;

        curLineContent = String(editor.getLine(curLine));
        checkClose = curLineContent.localeCompare(closeBracket);
        if (checkClose===0){
			bracketCount += 1;
            while (lineNow > 0){
                lineNow = lineNow - 1;
                curLineContent = String(editor.getLine(lineNow));
                checkOpen = curLineContent.localeCompare(openBracket);
                checkClose = curLineContent.localeCompare(closeBracket);
                if (checkOpen===0){
                    bracketCount -= 1;
                }
                else if (checkClose===0){
                    bracketCount += 1;
                }
                if (bracketCount===0) break;
            }

			for (var i = lineNow; i<curLine; i++)
			{
                editor.addLineClass(i, 'background', 'CodeMirror-activeline-background');
			}
		}
        else
		{
            for (var i = 0; i<lineNow; i++)
            {
                editor.removeLineClass(i, 'background', 'CodeMirror-activeline-background');
            }
		}
    });

	//post for run button
	function interpret(data) {
		$.ajax({method: "POST", url: '/interpret', data: {code: data}});
	}

	function runtemp(data) {
		$.ajax({method: "POST", url: '/runtemp', data: {code: data}});
	}

	function runsel() {
		var selection = editor.getSelection();
		if (selection !== '') {
			interpret(selection);
		} else {

			var openBracket = "(";
			var closeBracket = ")";
			var curLine = editor.getCursor().line;
			var lineNow = curLine;
			var lineRem = lineNow;
			var codeBracket = "";
			var curLineContent;
			var checkOpen=1;
			var checkClose=1;
			var countBrackets=0;
			var countBracketsClose=0;
			var bracketFound = 0;

			while (lineNow > 0){
				lineNow = lineNow - 1;
				curLineContent = String(editor.getLine(lineNow));

				checkClose = curLineContent.localeCompare(closeBracket);
				if (checkClose===0){
					countBracketsClose += 1;
				}

				checkOpen = curLineContent.localeCompare(openBracket);
				if (checkOpen===0){
					bracketFound = 1;
					if (countBracketsClose === 0) {
						countBrackets += 1;
						lineRem = lineNow + 1;
					}
					else{
						countBracketsClose -= 1;
					}
				}


			}

			lineNow = lineRem;
			if (bracketFound!==0 && countBrackets>0) {
				while (countBrackets !== 0) {
					checkClose = String(editor.getLine(lineNow)).localeCompare(closeBracket)
					if (checkClose === 0 && lineNow>=curLine) {
						countBrackets -= 1;
					}
					checkOpen = String(editor.getLine(lineNow)).localeCompare(openBracket)
					if (checkOpen === 0 && lineNow>=curLine) {
						countBrackets += 1;
					}
					if (countBrackets===0) break;

					codeBracket += String(editor.getLine(lineNow));
					lineNow += 1;
				}
				interpret(codeBracket);
			}
			else{
				interpret(editor.getLine(editor.getCursor().line));
			}
		}
	};

	function searchHelp(){
		var helpLink = "/schelp/Search.html"+"?value="+ curWord;
		window.open(helpLink);
	};

	function detectOS() {
		var OSName='Unknown OS';
		if (navigator.appVersion.indexOf("Win")!== -1) OSName="Windows";
		if (navigator.appVersion.indexOf("Mac")!== -1) OSName="MacOS";
		if (navigator.appVersion.indexOf("X11")!== -1) OSName="UNIX";
		if (navigator.appVersion.indexOf("Linux")!== -1) OSName="Linux";
		return OSName;
	}

	function setExtrakeys() {
		var OS = detectOS();
		if (OS === 'MacOS'){
			editor.setOption("extraKeys", {
				'Cmd-Enter': function(){runsel();},
				'Cmd-.' : function () {interpret('CmdPeriod.run;');},
				'Cmd-D' : function () {searchHelp();},
				'Cmd-/' : "toggleComment"
			});
		} else {
			editor.setOption("extraKeys", {
				'Ctrl-Enter': function(){runsel();},
				'Ctrl-.' : function () {interpret('CmdPeriod.run;');},
				'Ctrl-D' : function () {searchHelp();},
				'Ctrl-/' : "toggleComment"
			});
		}
	}

	$(document).ready(function () {

		var socket = io.connect();

		var $runButton = $('#runButton');
		var $killButton = $('#killButton');
		var $clearConsoleButton = $('#clearConsoleButton');

		var $loadscfilebutton = $('#loadscfilebutton');
		var $savescfilebutton = $('#savescfilebutton');
		var $deletescfilebutton = $('#deletescfilebutton');
		var $deletesoundfilebutton = $('#deletesoundfilebutton');

		var $consoleTextarea = $('#consoleTextarea');
		var $supercolliderfiles = $('#supercolliderfiles');
		var $soundfiles = $('#soundfiles');

		var $clock = $('#clock');
		var $hostname = $('#hostname');
		var $ethernetip = $('#ethernetip');
		var $wirelessip = $('#wirelessip');
		var $cpu = $('#cpu');
		var $freemem = $('#freemem');

		var $rebootSubmit = $('#rebootButton');
		var $shutdownSubmit = $('#shutdownButton');
		var $restartSclangSubmit = $('#restartSclangButton');
		var $loadedFile = $('#loadedFile');
		var fileLoaded;

        setExtrakeys();

		$rebootSubmit.click(function () {
			$.ajax({method: "POST", url: '/reboot'});
			alert('Rebooting...');
		});
		$shutdownSubmit.click(function () {
			$.ajax({method: "POST", url: '/shutdown'});
			alert('Shutting down...')
		});
		$restartSclangSubmit.click(function () {
			$.ajax({method: "POST", url: '/restartsclang'});
		});

		//run all code in editor window
		$runButton.click(function () {runtemp(editor.getValue());});
		//kill all nodes on server
		$killButton.click(function () {interpret('CmdPeriod.run;')});
		//clear console textarea
		$clearConsoleButton.click(function () {$consoleTextarea.html('');});

		//file management buttons
		$loadscfilebutton.click(function () {
			var temp = $supercolliderfiles.val();
			var fileindex =  JSON.stringify(temp);
			$.ajax({method: "POST", url: '/supercolliderfiles',data: {action: 'load', fileindex: fileindex}});
		})

		$savescfilebutton.click(function () {
			var filename=prompt('Enter new file name', fileLoaded);
			if(filename) {
				$.ajax({method: "POST", url: '/supercolliderfiles',data: {action: 'save', filename: filename, code: editor.getValue()}});
			}
		})

		$deletescfilebutton.click(function () {
			var temp = $supercolliderfiles.val();
			var fileindex =  JSON.stringify(temp);
			$.ajax({method: "POST", url: '/supercolliderfiles',data: {action: 'delete', fileindex: fileindex}
			});
		})


		$deletesoundfilebutton.click(function () {
			var temp = $soundfiles.val();
			var fileindex =  JSON.stringify(temp);
			$.ajax({method: "POST", url: '/soundfiles',data: {action: 'delete', fileindex: fileindex}
			});
		})

		//socket actions
		socket.on('toeditor', function (data) {
            editor.setValue(data);
		});

        socket.on('toprompt', function (data) {
            fileLoaded = String(data);
			console.log(data);
			$loadedFile.html(fileLoaded);
        });

		socket.on('toconsole', function (data) {

            $consoleTextarea.append(data);
            $consoleTextarea.scrollTop($consoleTextarea[0].scrollHeight);

            var maxConsoleChar = 4000;
            var sliceChar = -2000;
			var tempBuf;
            if ($consoleTextarea.val().length >= maxConsoleChar){
				//slice
                tempBuf = $consoleTextarea.val().slice(sliceChar);
                //post
                $consoleTextarea.html(tempBuf);
            }
		});

		socket.on('tosupercolliderfiles', function (data) {
			$supercolliderfiles[0].options.length = 0;
			$.each(data, function(key, value) {
				$supercolliderfiles
					.append($('<option>', { value : key })
						.text(value));
			});
		});

		socket.on('tosoundfiles', function (data) {
			$soundfiles[0].options.length = 0;
			$.each(data, function(key, value) {
				$soundfiles
					.append($('<option>', { value : key })
						.text(value));
			});
		});

		//receive systeminfo
		socket.on('systeminfo', function (data) {
				$clock.html(data.tick +' s');
				$hostname.html(data.hostname);
				$ethernetip.html(data.ethernetip);
				$wirelessip.html(data.wirelessip);
				$cpu.html(data.cpu + ' %');
				$freemem.html(data.freemem + ' Mb' );
		})

		// prevent cmd or ctrl + d from triggering add bookmark on browsers (not working in Firefox)
		$(document).bind('keydown', function(e) {
			if(((e.metaKey) || (e.ctrlKey)) && (e.which == 68)) {e.preventDefault(); return false;};
		});

		//close socket when closing client
		$(window).on('beforeunload', function(){
			socket.close();
		});
	})
</script>

</body>
</html>
